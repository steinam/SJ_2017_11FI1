Runde 1
-------

Infrastruktur
~~~~~~~~~~~~~

Der Aufbau der verwendeten Software in unserem Tutorial ist wie folgt:


- Visual Studio

  Zur Arbeit mit dem Subversion-Server muss in VStudio ein SVN-Plugin (ANKH-SVN) installiert werden. 
  Sie finden das entsprechende Programm im Order CI auf dem tauschlaufwerk.

- Subversion-Server

  Der entsprechende Quellcode ist pro Gruppe in einem SVN-Repository gespeichert. 
  Jede Gruppe hat ihr entsprechendes Login und hat RW-Zugriff auf das Repository.
  Nachdem Sie das obige Plugin installiert haben, erstellen Sie in Visual Studio ein neues Projekt aus den Subversion-Server heraus und speichern es auf dem lokalen Rechner.
  
  
  .. image:: figure/VStudio_SVN_Projekt.jpg
  
  .. image:: figure/VStudio_SVN_Projekt_1.jpg
  
  .. image:: figure/VStudio_SVN_Projekt_2.jpg

- Weitere Tools werden zu gegebener Zeit in Visual Studio hinzugefügt.
  
  
Das Programm
~~~~~~~~~~~~

.. TODO:: Hier das bestehende Program vorstellen.

Das Beispielprogramm ist sehr einfach gehalten. Das Programm berechnet die Kundengebühren eines fiktiven Kunden in einem Videoladen und druckt diese aus. Es erhält dafür die Filme, die ein Kunde ausgeliehen hat, sowie die Dauer der Ausleihe. Es berechnet dann die Gebühren und identifiziert die Art des Films (normal, Kinder, Neuheit). Zusätzlich berechnet das Programm "Rabattpunkte", die davon abhängen, ob der Film eine Neuheit ist.


.. image:: figure/prgramm_startingpoint.jpg

.. code-block:: csharp

	//Movie.cs 
 
	using System; 
	namespace Before { 
	  public enum PriceCodes { 
	    Regular, NewRelease, Childrens 
	  } 
	 
	  public class Movie { 
	    private string m_Title; 
	    private PriceCodes m_PriceCode; 
	 
	    public Movie(string title, PriceCodes priceCode) { 
	      m_Title = title; 
	      m_PriceCode = priceCode; 
	    } 
	 
	    public PriceCodes PriceCode  { 
	      get {return m_PriceCode;} 
	      set {m_PriceCode = value;} 
	    } 
	 
	    public string Title  { 
	      get {return m_Title;} 
	    } 
	  } 
	} 


.. code-block:: csharp

	//Rental.cs 
	 
	using System; 
	namespace Fowler { 
	  public class Rental  { 
	    private Movie m_Movie; 
	    private int m_DaysRented; 
	 
	    public Rental(Movie movie, int daysRented) { 
	      m_Movie = movie; 
	      m_DaysRented = daysRented; 
	    } 
	 
	    public int DaysRented { 
	      get {return m_DaysRented;} 
	    } 
	 
	    public Movie Movie { 
	      get {return m_Movie;} 
	    } 
	  } 
	} 


.. code-block:: csharp
	
	//Customer.cs 
	
	using System; 
	using System.Collections; 
	namespace Fowler { 
	  public class Customer { 
	    private string m_Name; 
	    private ArrayList  m_Rentals = new ArrayList(); 
	 
	    public Customer(string name) { 
	      m_Name = name; 
	    } 
	 
	    public string Name { 
	      get {return m_Name;} 
	    } 
	 
	    public void AddRental(Rental arg) { 
	      m_Rentals.Add(arg); 
	    } 
	    //public string Statement() { //See the next page } 
	  } 
	} 	
	
	
Die Statement-Methode in der Klasse Customer führt nun alle Berechnungen durch. Folgendes Sequenzdiagramm zeigt den prinzipiellen Ablauf:

.. image:: figure/prgramm_startingpoint_seq.jpg

.. code-block:: csharp

	public string Statement() { 
	      double totalAmount = 0; 
	      int frequentRenterPoints = 0; 
	      IEnumerator rentals = m_Rentals.GetEnumerator(); 
	      string result = "Rental record for " + m_Name + "\n"; 
	      while ( rentals.MoveNext() ) { 
		double thisAmount = 0; 
		Rental each = (Rental)rentals.Current; 
	 
		switch(each.Movie.PriceCode) { 
		  case PriceCodes.Regular: 
		    thisAmount += 2; 
		    if (each.DaysRented > 2) { 
		      thisAmount += (each.DaysRented - 2) * 1.5; 
		    } 
		    break; 
	 
		  case PriceCodes.NewRelease: 
		    thisAmount += each.DaysRented *3; 
		    break; 
	 
		  case PriceCodes.Childrens: 
		    thisAmount += 1.5; 
		    if (each.DaysRented > 3) { 
		      thisAmount = (each.DaysRented - 3) * 1.5; 
		    } 
		    break; 
		} 
	 
		frequentRenterPoints++; 
	 
		if ((each.Movie.PriceCode == PriceCodes.NewRelease)  
		  && (each.DaysRented > 1)) { 
		  frequentRenterPoints ++; 
		} 
	 
		result += "\t" + each.Movie.Title + "\t"  
		  + thisAmount.ToString() + "\n"; 
		totalAmount += thisAmount; 
	      } 
	 
	      result += "Amount owed is " + totalAmount.ToString() + "\n"; 
	      result += "You earned " + frequentRenterPoints.ToString()  
		+ " frequent renter points."; 
	      return result; 
    } 



	

Entwickeln unter einer Versionsverwaltung
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Die Entwicklung mit/ohne Versionsverwaltung unterscheidet sich zunächst nicht wesentlich. Es ist lediglich zu beachten, dass jegliche Änderungen zunächst nur an der lokalen Kopie ausgeührt werden. Ein Änderung im zentralen Versions-Repository muss durch den Entwickler mit Hilfe eines **Commits**
angestoßen werden.

Bei einer Arbeit im Team weiß der einzelne Entwickler nicht, welche teile des Quellcodes zur Zeit von seinen Kollegen bearbeitet wird. Um sein lokales Projekt auf dem aktuellen Stand zu halten, muss er deshalb selbts häüfig **Updates** aus dem zentralen Repository in seine lokale Kopie einspielen. Hat er in der Zwischenzeit gleiceh Quellode-Teile wie ein anderer Entwickler bearbeitet, führt dies automatisch zu Konflikten im Quellcode, die dann manuell gelößt werden müssen. Diese "Ärgernisse" führen im Alltag aber eher dazu, dass sich Entwickler genau absprechen, wer welche Codeteile bearbeitet. Es ist damit eher von Vortiel als von Nachteil.


.. image:: figure/svncycle.png


In unserem Beispiel wollen wir in den bestehenden Code einige Unit-Tests einbauen.

Erstellen von Unit-Tests
~~~~~~~~~~~~~~~~~~~~~~~~~

.. sidebar:: NuGet

	Informieren Sie sich über die NuGet-Pakteverwaltung von VisualStudio

Das Test-Framework NUnit kann auf verschiedene Weise installiert werden. Ein für das weitere Fortschreiten des  Projektes sinnvolles Vorgehen ist es, mit Hilfe des NuGet-Paketmanagers die notwendigen Dateien automatisch in das VStudio-Projekt zu integrieren.
Neben der Installation des NUnit-Frameworks muss dies als Verweis in die Solution mit eingebunden werden. Ein using-Statement erlaubt anschlie0end den Zugriff auf die Funktionalitäten des Test-Frameworks.

Für das Ausführen der Tests ist allerdings dennoch die manuelle Installation des Nunit-Frameworks notwendig.




.. note:: Beschreiben Sie die wesentliche Funktionsweise eines Unit-Test-Frameworks.

	.. image:: figure/notiz.jpg
		:width: 300px
		
Zum Testen der korrekten Funktionalität sollen einige Demo-Objekte von Filmen, Kunden und Ausleihvorgängen erzeugt werden. Anschließend wird in einem ersten Test überprüft, ob die richtigen Daten zurückgeliefert werden.

.. code-block:: csharp

	using System;
	using NUnit.Framework;

	namespace StartingPoint
	{
		/// <summary>
		/// Unit tests for StartingPoint project.
		/// </summary>
		[TestFixture]
		public class UnitTests
		{
			/* Fields */
	
			// Movies
			Movie m_Cinderella;
			Movie m_StarWars;
			Movie m_Gladiator;
	
			// Rentals
			Rental m_Rental1;
			Rental m_Rental2;
			Rental m_Rental3;
	
			// Customers
			Customer m_MickeyMouse;
			Customer m_DonaldDuck;
			Customer m_MinnieMouse;
	
			/* Methods */
	
			[SetUp]
			public void Init()
			{
				// Create movies
				m_Cinderella = new Movie("Cinderella", PriceCodes.Childrens);
				m_StarWars = new Movie("Star Wars", PriceCodes.Regular);
				m_Gladiator = new Movie("Gladiator", PriceCodes.NewRelease);
	
				// Create rentals
				m_Rental1 = new Rental(m_Cinderella, 5);
				m_Rental2 = new Rental(m_StarWars, 5);
				m_Rental3 = new Rental(m_Gladiator, 5);
	
				// Create customers
				m_MickeyMouse = new Customer("Mickey Mouse");
				m_DonaldDuck = new Customer("Donald Duck");
				m_MinnieMouse = new Customer("Minnie Mouse");
			}
	
			[Test]
			public void TestMovie()
			{
				// Test title property
				Assert.AreEqual("Cinderella", m_Cinderella.Title);
				Assert.AreEqual("Star Wars", m_StarWars.Title);
				Assert.AreEqual("Gladiator", m_Gladiator.Title);
	
				// Test price code
				Assert.AreEqual(PriceCodes.Childrens, m_Cinderella.PriceCode);
				Assert.AreEqual(PriceCodes.Regular, m_StarWars.PriceCode);
				Assert.AreEqual(PriceCodes.NewRelease, m_Gladiator.PriceCode);
			}



Der entscheidende Test wird aber das Überprüfen der Statement()-Methode sein.

.. note:: Aufgabe

	Überlegen Sie, wie man die Statement-Methode testen könnte.


.. sidebar::
	
	Da die Statement-Methode einen String zurückgibt, muss der Unit-Test auf den kompletten String prüfen. 

	
.. code-block:: csharp

	[Test]
	public void TestCustomer()
	{
	    // Test Name property
            Assert.AreEqual("Mickey Mouse", m_MickeyMouse.Name);
            Assert.AreEqual("Donald Duck", m_DonaldDuck.Name);
            Assert.AreEqual("Minnie Mouse", m_MinnieMouse.Name);

	    // Test AddRental() method - set up for test
	    m_MickeyMouse.AddRental(m_Rental1);
	    m_MickeyMouse.AddRental(m_Rental2);
	    m_MickeyMouse.AddRental(m_Rental3);

	    /* At this point, the structure of the program begins getting in the
	    * way of testing. Rentals are imbedded in the Customer object, but
	    * there is no property to access them. They can only be accessed 
	    * internally, by the Statement() method, which imbeds them in the
	    * text string passed as it's return value. So, to get these amounts,
	    * we will have to parse that value. */

	    // Test the Statement() method
	    string theResult = m_MickeyMouse.Statement();

	    // Parse the result
	    char[] delimiters = "\n\t".ToCharArray();
	    string[] results = theResult.Split(delimiters);

	    /* The results[] array will have the following elements:
	    *		[0] = junk
	    *		[1] = junk
	    *		[2] = title #1
	    *		[3] = price #1
	    *		[4] = junk
	    *		[5] = title #2
	    *		[6] = price #2
	    *		[7] = junk
	    *		[8] = title #3
	    *		[9] = price #3
	    *		[10] = "Amount owed is x"
	    *		[11] = "You earned x frequent renter points."
	    * We will test the title and price elements, and the total 
	    * and frequent renter points items. If these tests pass, then 
	    * we know that AddRentals() is adding rentals to a Customer 
	    * object properly, and that the Statement() method is
	    * generating a statement in the expected format. */

	    // Test the title and price items
            Assert.AreEqual("Cinderella", results[2]);
            Assert.AreEqual(3, Convert.ToDouble(results[3]));
            Assert.AreEqual("Star Wars", results[5]);
            Assert.AreEqual(6.5, Convert.ToDouble(results[6]));
            Assert.AreEqual("Gladiator", results[8]);
            Assert.AreEqual(15, Convert.ToDouble(results[9]));
	}

	
Ausführen der Tests
~~~~~~~~~~~~~~~~~~~

In unserem Beispiel wurden die Tests innerhalb des Projektes definiert. In größeren Projekten würde ein eigenes Testprojekt definiert werden, welches das zu testende Projekt referenziert.
Mit der Installation des NUnit-Frameworks wird ein Testprogramm mitgeliefert; es befindet sich im bin-Verzeichnis. Nach dem erfolgreichen Compilieren des Quellcodes und dem Aufruf von nunit erscheint folgende grafische Oberfläche.

.. image:: figure/NUnit_StartingPoint.jpg

Bei erfolgreichen Tests färbt sich der Balken grün.

.. image:: figure/NUnit_StartingPoint_1.jpg


Commit der Änderungen
~~~~~~~~~~~~~~~~~~~~~

Fügen Sie die Änderungen des Quellcodes auch in das zentrale Repository hinzu, indem sie im Projektexplorer von VStudio CommitChanges anklicken.

.. image:: figure/NUnit_StartingPoint_2.jpg

Der SVN-Client analysiert die Änderungen und trägt sie im zentralen Repository ein.

